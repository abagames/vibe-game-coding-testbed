---
description: 
globs: *.ts
alwaysApply: false
---
# VGCT Coding Standards

## Type Definitions
Use types from [coreTypes.ts](mdc:src/core/coreTypes.ts):
- `InputState` for input handling
- `CellAttributes` for cell styling
- `CellInfo` for grid data
- `GridData` for the full screen
- `BaseGameOptions` for game configuration
- `BaseGameState` for functional game state (when using modules)

## Architectural Patterns

### Functional Module Pattern (Recommended)
Follow the modular functional approach from [defaultGame core.ts](mdc:src/games/defaultGame/core.ts):
- Use pure functions that take state and return new state
- Define game state types extending `BaseGameState`
- Use functions from [baseGame.ts](mdc:src/core/baseGame.ts)

```typescript
export type YourGameState = BaseGameState & {
  playerX: number;
  playerY: number;
  // Add game-specific state
};

export function createYourGame(options: YourGameOptions = {}): YourGameState {
  const baseState = createBaseGame(options);
  return { ...baseState, playerX: 0, playerY: 0 };
}

export function updateYourGame(state: YourGameState, input: InputState): YourGameState {
  // Pure function that returns new state
  return { ...state, playerX: newX, playerY: newY };
}
```

### Class-based Pattern (Legacy Support)
When using the class approach, extend [BaseGame.ts](mdc:src/core/BaseGame.ts):
- Use named arguments with interfaces
- Implement required abstract methods
- Follow established inheritance patterns

### Performance Guidelines
- Optimize for 40×25 grid operations
- Minimize object creation in game loops
- Use array indexing for frequent lookups
- Cache frequently accessed values
- **Prefer array-based collision detection** over screen-based
- Use immutable state updates in functional modules

## Code Organization

### Module-based Games
- Game logic in `core.ts` with pure functions
- GameManager in `gameManager.ts` for flow control (optional)
- Simulation setup in `sim.ts` and `gameManagerSim.ts`
- Browser integration in `browser.ts`
- Follow [defaultGame structure](mdc:src/games/defaultGame)

### File Structure Pattern
```
src/games/[gameName]/
├── core.ts          // Pure game logic functions
├── gameManager.ts   // Game flow management (optional)
├── sim.ts           // Basic simulation
├── gameManagerSim.ts // GameManager simulation
├── browser.ts       // Browser entry point
└── index.html       // Browser execution
```

## Example References
See [defaultGame](mdc:src/games/defaultGame) for examples of:
- Functional state management with [core.ts](mdc:src/games/defaultGame/core.ts)
- GameManager pattern with [gameManager.ts](mdc:src/games/defaultGame/gameManager.ts)
- Array-based collision detection (`obstacles`, `items` arrays)
- Pure function composition
- Proper state immutability

## Commenting Standards
- Focus on *Why* not *What* in comments
- Explain reasoning behind code choices
- Comments must be written in English
- Document state transformations in functional code

## AI Assistant Communication Standards
- Do not use directive comments like 'Add this code' or 'Update that variable'
- Focus on describing the logic and reasoning

## Architectural Style
- **Prefer functional programming**: Use pure functions and immutable state
- **Classes sparingly**: Only when clear benefits (inheritance, encapsulation)
- **Composition over inheritance**: Build complex behavior through function composition

## Type Safety Guidelines

### ❌ Avoid Type Weakening Features
**Minimize use of type assertions and `any`** except for debugging:

```typescript
// ✅ Correct - Use type guards
function isValidPosition(obj: unknown): obj is Position {
  return typeof obj === 'object' && obj !== null && 'x' in obj && 'y' in obj;
}

// ✅ Correct - Use type predicates
const validPositions = positions.filter((pos): pos is Position => 
  isValidPosition(pos)
);

// ✅ Acceptable - String literal types with const assertion
const CONFIG = {
  color: "purple" as const,
  displayChar: "S"
};

// ❌ Avoid - Type assertions without proper guards
const position = getPosition() as Position; // Dangerous!

// ❌ Avoid - any type (except for debugging)
function processData(data: any) { // Loses all type safety
  return data.someProperty;
}
```

### ✅ Preferred Type Safety Patterns
- Use discriminated unions with type guards
- Leverage TypeScript's control flow analysis
- Use type predicates for filtering
- Employ const assertions for literal types
- Define proper interfaces and types upfront

## Mandatory Patterns

### ❌ Avoid Enums
**NEVER use TypeScript enums**. Use numeric constants instead:
```typescript
// ✅ Correct
const INITIAL_LIVES = 3;
const PLAYER_MOVEMENT_INTERVAL = 3;

// ❌ Incorrect
enum GameConstants { INITIAL_LIVES = 3, MOVEMENT_INTERVAL = 3 }
```

### ✅ Use Named Arguments
For optional parameters, use interface-based options:
```typescript
// ✅ Correct - Functional approach
interface GameOptions {
  initialLives?: number;
  movementInterval?: number;
  obstacleCount?: number;
}

export function createGame(options: GameOptions = {}): GameState {
  const { 
    initialLives = 3, 
    movementInterval = 3,
    obstacleCount = 20 
  } = options;
  return createBaseGame({ initialLives });
}

// ❌ Incorrect
function createGame(initialLives: number = 3, interval: number = 3) {}
```

## BaseGame Module Functions (Functional Approach)

### Core State Functions
- `createBaseGame(options)`: Create initial base game state
- `clearVirtualScreen(state)`: Clear the virtual screen
- `updateBaseGame(state, input, operations)`: Update base game logic

### Drawing Functions
- `drawText(state, text, x, y, attributes?)`: Draw text to virtual screen
- `drawCenteredText(state, text, y, attributes?)`: Draw centered text

### Game State Functions
- `getCellInfo(state, x, y)`: Get cell information at coordinates
- `addScore(state, value)`: Add to score and return new state
- `loseLife(state)`: Decrease lives and handle game over
- `triggerGameOver(state)`: Manually end the game
- `getScore(state)`, `getLives(state)`, `isGameOver(state)`: State getters
- `getVirtualScreenData(state)`: Get the full grid

### UI Rendering Functions
- `renderStandardUI(state)`: Render score, lives, and restart instruction
- `renderGameOverScreen(state)`: Render game over screen with restart prompt

### Audio Functions
- `playSoundEffect(state, sound, seed?)`: Play sound effect
- `playMml(state, mml)`: Play MML music
- `playBgm(state)`: Start background music
- `stopBgm(state)`: Stop background music

## Browser Helper Functions

### Input Handling
- `mapCrispInputToGameInputState()`: Converts crisp-game-lib keyboard input to InputState
  - Maps Arrow keys + WASD → directional input
  - Maps Space/Enter/Z/X → action1

### Game Setup (Module-based)
- `initStandardTextGame(gameFactory, helperOptions?, cglOptions?)`: Complete module game initialization
- `createStandardGameLoop(gameFactory, gameName?, enableHighScore?)`: Creates game loop for modules

### Game Setup (Class-based)
- `initStandardTextGameForClass(gameFactory, helperOptions?, cglOptions?)`: Complete class game initialization
- `createStandardGameLoopForClass(gameFactory, gameName?, enableHighScore?)`: Creates game loop for classes

### Rendering
- `renderVirtualScreen(virtualScreenData, width, height, charWidth, charHeight)`: Draws the 40×25 grid to canvas

### High Score Management
- `loadHighScoreFromStorage(gameName)`: Load high score from localStorage
- `saveHighScoreToStorage(gameName, score)`: Save high score to localStorage

---
description: 
globs: 
alwaysApply: true
---
# VGCT Architecture and Structure

## Overview
Vibe Game Coding Testbed (VGCT) is a framework for developing text-based games in a 40x25 character terminal environment. It supports both functional module and class-based architectures.

## Core Architecture

### Module Structure
- **Core Module** ([src/core/](mdc:src/core)): Base classes and type definitions
  - [baseGame.ts](mdc:src/core/baseGame.ts): Functional module approach with pure functions
  - [coreTypes.ts](mdc:src/core/coreTypes.ts): Shared interfaces and constants
- **Utils Module** ([src/utils/](mdc:src/utils)): Common utilities
  - [browserHelper.ts](mdc:src/utils/browserHelper.ts): Browser integration helpers with dual support
  - [browserAudioService.ts](mdc:src/utils/browserAudioService.ts): Browser audio service implementation
  - [consoleSimulator.ts](mdc:src/utils/consoleSimulator.ts): Console-based testing utility
- **Games Module** ([src/games/](mdc:src/games)): Individual game implementations

### Architectural Approaches

#### 1. Functional Module Architecture (Recommended)
Uses pure functions and immutable state management:

```typescript
// State definition
export type GameState = BaseGameState & {
  playerX: number;
  playerY: number;
  // Game-specific state
};

// Core functions
export function createGame(options: GameOptions = {}): GameState;
export function initializeGame(state: GameState): GameState;
export function updateGame(state: GameState, input: InputState): GameState;
```

**Benefits:**
- Easier testing (pure functions)
- Better performance (immutable updates)
- Clearer data flow
- Simpler debugging

#### 2. GameManager Pattern (Advanced)
For complex games with multiple flow states:

```typescript
// Game flow state constants
const GAME_FLOW_STATE_TITLE = 0;
const GAME_FLOW_STATE_PLAYING = 1;
const GAME_FLOW_STATE_GAME_OVER = 2;

export type GameManagerState = GameState & {
  gameFlowState: number;
  titleAnimationTimer: number;
  gameOverTimer: number;
  isDemoMode: boolean;
};
```

**Use cases:**
- Games with title screens
- Demo mode support
- Complex state transitions
- Multi-phase gameplay

### Game Structure Patterns

#### Standard Functional Module Structure
```
src/games/[gameName]/
├── core.ts              // Pure game logic functions
├── sim.ts               // Basic simulation testing
├── browser.ts           // Browser entry point
└── index.html           // Browser execution HTML
```

#### GameManager Structure (Complex Games)
```
src/games/[gameName]/
├── core.ts              // Core game logic functions
├── gameManager.ts       // Flow state management
├── sim.ts               // Basic simulation testing
├── gameManagerSim.ts    // GameManager simulation testing
├── browser.ts           // Browser entry point
└── index.html           // Browser execution HTML
```

### Browser Integration Patterns

#### Modern Functional Module Integration (Recommended)
```typescript
// browser.ts - Latest pattern using initGame
import "crisp-game-lib";
import { initGame } from "../../utils/browserHelper.js";
import { createBrowserAudioService } from "../../utils/browserAudioService.js";
import {
  createYourGameState,
  initializeYourGame,
  updateYourGame,
  YourGameState,
  YourGameOptions,
} from "./core.js";

initGame<YourGameState, YourGameOptions>({
  createState: createYourGameState,
  initializeGame: initializeYourGame,
  updateGame: updateYourGame,
  defaultAudioService: createBrowserAudioService,
  gameSettings: {
    gameName: "yourGame",
    enableHighScoreStorage: true,
    enableGlobalReset: true,
  },
  cglOptions: {
    isSoundEnabled: true,
    audioSeed: 42,
  },
});
```

#### GameManager Integration
```typescript
// browser.ts for GameManager
import "crisp-game-lib";
import { initGame } from "../../utils/browserHelper.js";
import { createBrowserAudioService } from "../../utils/browserAudioService.js";
import {
  createYourGameManagerState,
  updateGameManager,
  YourGameManagerState,
  YourGameManagerOptions,
} from "./gameManager.js";

initGame<YourGameManagerState, YourGameManagerOptions>({
  createState: createYourGameManagerState,
  initializeGame: (state) => state, // GameManager handles its own init
  updateGame: updateGameManager,
  defaultAudioService: createBrowserAudioService,
  gameSettings: {
    gameName: "yourGame",
    enableHighScoreStorage: true,
    enableGlobalReset: true,
  },
  cglOptions: {
    isSoundEnabled: true,
    audioSeed: 42,
  },
});
```

#### Class-based Integration (Legacy Support)
```typescript
// browser.ts for class-based games
import "crisp-game-lib";
import { YourGameClass } from "./YourGameClass.js";
import { createBrowserAudioService } from "../../utils/browserAudioService.js";
import { initStandardTextGameForClass } from "../../utils/browserHelper.js";

function createYourGame(options: any = {}) {
  return new YourGameClass({
    ...options,
    audioService: createBrowserAudioService(),
  });
}

initStandardTextGameForClass(
  createYourGame,
  {
    enableGlobalReset: true,
    gameName: "yourGame",
    enableHighScoreStorage: true,
  },
  {
    isSoundEnabled: true,
    audioSeed: 1,
  }
);
```

### Key Constants and Specifications
- **Screen size**: 40 characters × 25 lines (VIRTUAL_SCREEN_WIDTH/HEIGHT)
- **Input mapping**: Standard keyboard (arrows, WASD, space, enter, Z/X)
- **Display**: ASCII characters only with color support
- **Frame rate**: Typically 60 FPS in browser, configurable in simulation
- **Color support**: Standard terminal colors via `CellAttributes`

### State Management Patterns

#### Immutable State Updates (Functional)
```typescript
// Always return new state objects
export function updateGame(state: GameState, input: InputState): GameState {
  return {
    ...state,
    playerX: newX,
    playerY: newY,
    score: state.score + points,
  };
}
```

### Testing Architecture

#### Functional Module Testing
```typescript
// Direct function testing
let gameState = createYourGame();
gameState = initializeYourGame(gameState);
gameState = updateYourGame(gameState, inputState);

// Easy to test state transformations
expect(gameState.playerX).toBe(expectedX);
```

#### GameManager Testing
```typescript
// Flow state testing
let managerState = createYourGameManager();
managerState = updateGameManager(managerState, { action1: true });
expect(managerState.gameFlowState).toBe(GAME_FLOW_STATE_PLAYING);
```

### Performance Characteristics

#### Functional Modules
- **Pros**: Immutable updates prevent side effects, easier to optimize
- **Cons**: Memory allocation for new state objects
- **Best for**: Games with complex state, frequent testing needs

#### GameManager
- **Pros**: Clear separation of concerns, easy flow management
- **Cons**: Additional complexity layer
- **Best for**: Games with multiple screens/phases

### High Score and Persistence

#### Browser Environment Configuration
```typescript
// Modern initGame configuration with high score support
initGame<YourGameState, YourGameOptions>({
  createState: createYourGameState,
  initializeGame: initializeYourGame,
  updateGame: updateYourGame,
  defaultAudioService: createBrowserAudioService,
  gameSettings: {
    gameName: "yourGame",
    enableHighScoreStorage: true,  // Enable localStorage high scores
    enableGlobalReset: true,       // Enable R key reset
  },
  cglOptions: {
    isSoundEnabled: true,
    audioSeed: 42,
  },
});
```

#### localStorage Integration
- High scores automatically saved/loaded
- Game name used as storage key
- Session high score tracking
- Browser-only feature (requires `isBrowserEnvironment: true`)

### Audio Integration

#### Modern Audio Service Pattern
```typescript
// Import and use browser audio service
import { createBrowserAudioService } from "../../utils/browserAudioService.js";

// Configure in initGame
initGame<YourGameState, YourGameOptions>({
  // ... other config
  defaultAudioService: createBrowserAudioService,
  cglOptions: {
    isSoundEnabled: true,
    audioSeed: 42,
    audioTempo: 156,
    bgmVolume: 6,
  },
  audioFiles: {
    bgm: "your_music.mp3",
  },
});
```

### Development Workflow

1. **Choose Architecture**: Start with functional modules for new projects
2. **Implement Core Logic**: Create state types and update functions
3. **Add GameManager** (if needed): For complex flow states
4. **Set Up Testing**: Create simulation files for rapid iteration
5. **Browser Integration**: Use modern `initGame` API
6. **Add NPM Scripts**: Set up build and test commands

### Migration Path

#### Legacy to Modern Browser Integration
1. Replace `initStandardTextGame` with `initGame`
2. Add `createBrowserAudioService` import
3. Update configuration structure
4. Add TypeScript generics for type safety

#### Functional to GameManager
1. Add flow state enum
2. Extend state with flow management
3. Create manager update function
4. Update browser integration

### Browser Helper API Reference

#### initGame Function
```typescript
interface GameConfig<TState, TOptions extends BaseGameOptions> {
  createState: (options: TOptions) => TState;
  initializeGame: (state: TState) => TState;
  updateGame: (state: TState, input: InputState) => TState;
  defaultAudioService?: () => any;
  gameSettings: {
    gameName?: string;
    enableHighScoreStorage?: boolean;
    enableGlobalReset?: boolean;
  };
  cglOptions?: Partial<Options>;
  audioFiles?: { [key: string]: string };
}

export function initGame<TState, TOptions extends BaseGameOptions>(
  config: GameConfig<TState, TOptions>
): void;
```

## Reference Implementation
See [defaultGame](mdc:src/games/defaultGame) for a complete example demonstrating:
- [Functional core logic](mdc:src/games/defaultGame/core.ts)
- [GameManager pattern](mdc:src/games/defaultGame/gameManager.ts)
- [Dual simulation setup](mdc:src/games/defaultGame/sim.ts) and [GameManager simulation](mdc:src/games/defaultGame/simGameManager.ts)
- [Modern browser integration](mdc:src/games/defaultGame/browser.ts) with switchable implementation
- [Complete architecture](mdc:src/games/defaultGame) in action

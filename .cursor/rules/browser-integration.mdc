---
description: 
globs: ./**/*.ts
alwaysApply: false
---
# Browser Integration Patterns

## Standard Browser Setup

### Basic Integration
Use [browserHelper.ts](mdc:src/utils/browserHelper.ts) for standard browser integration:

```typescript
import { initStandardTextGame } from "../../utils/browserHelper.js";

// Define win condition (return true when player wins)
const winCondition = (game: any) => {
  // Option 1: Use BaseGame's built-in win state
  return game.isGameWon();
  
  // Option 2: Custom condition (example: all items collected)
  // return game.getVirtualScreenData().flat().every((cell: any) => 
  //   cell.attributes?.entityType !== "item"
  // );
};

// Initialize with standard configuration
initStandardTextGame(
  () => new YourGame(), // Game factory function
  winCondition          // Win condition checker
);
```

### Available Helper Functions

#### Input Mapping
- `mapCrispInputToGameInputState()`: Converts crisp-game-lib keyboard input to InputState
- Maps: Arrow keys + WASD → directional input
- Maps: Space/Enter/Z/X → action1

#### Rendering Helpers
- `renderVirtualScreen()`: Draws the 40×25 grid to canvas
- `renderStandardUI()`: Shows score and restart instruction
- `renderGameOverScreen()`: Displays win/lose screen with restart prompt

#### Text Drawing Utilities
- `drawTextOnGrid()`: Draw text at specific grid coordinates
- `drawCenteredTextOnGrid()`: Draw centered text on screen

#### Configuration
- `createStandardGameOptions()`: Standard crisp-game-lib options for text games
- Default: 40×25 characters, 4×6 pixel chars, dark theme

## HTML Structure
Create minimal [index.html](mdc:src/games/defaultGame/index.html):
```html
<!DOCTYPE html>
<html>
<head>
  <title>Your Game</title>
</head>
<body>
  <script type="module" src="./browser.js"></script>
</body>
</html>
```

## Development Workflow
1. Develop core logic with simulation testing (`npm run sim:yourGame`)
2. Test browser integration with `npm run dev`
3. Access game at `localhost:5173/src/games/yourGame/`

## Common Patterns
- **No custom rendering**: Use standard helpers from browserHelper.ts
- **Minimal browser.ts**: Just game initialization and win condition
- **Standard UI**: Score display and restart instruction included automatically
- **Input handling**: Automatic mapping from crisp-game-lib to InputState

## Reference Implementation
See [defaultGame browser.ts](mdc:src/games/defaultGame/browser.ts) for minimal browser integration example.


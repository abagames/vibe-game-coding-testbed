---
description: Comprehensive strategies for proactive bug discovery in game development using simulation, parameter manipulation, and systematic testing. Use this rule when debugging game mechanics, investigating reported bugs, implementing new features that need testing, or when game behavior seems inconsistent or unexpected.
globs: 
alwaysApply: false
---
# Game Testing Strategies

## Proactive Bug Discovery Through Simulation

### Core Philosophy
Don't wait for bugs to surface naturally - actively hunt them down using controlled simulation environments and parameter manipulation.

### Simulation-Based Testing Pattern

#### 1. Create Dedicated Test Simulations
For each game in `src/games/[gameName]/`, create simulation files. Choose based on your game architecture:

**A. Functional Module Testing (Recommended)**
Create `sim.ts` for basic functional module testing:
```typescript
// src/games/[gameName]/sim.ts
import { 
  createYourGame, 
  initializeYourGame, 
  updateYourGame,
  YourGameOptions 
} from "./core.js";
import { InputState } from "../../core/coreTypes.js";

const gameOptions: YourGameOptions = {
  // Modified parameters for testing
  initialLives: 1,
  movementInterval: 1, // Fast movement for testing
  obstacleCount: 5,    // Fewer obstacles
};

let gameState = createYourGame(gameOptions);
gameState = initializeYourGame(gameState);

let frame = 0;
const maxFrames = 200;

while(frame < maxFrames && !gameState.gameOverState) {
  const input: InputState = constructTestInput(frame);
  
  gameState = updateYourGame(gameState, input);
  printGameScreen(gameState);
  console.log(`Frame: ${frame}, Score: ${gameState.score}, Lives: ${gameState.lives}`);
  frame++;
}
console.log("Simulation ended.");
```

**B. GameManager Testing (Complex Games)**
Create `gameManagerSim.ts` for games with flow states:
```typescript
// src/games/[gameName]/gameManagerSim.ts
import { 
  createYourGameManager, 
  updateGameManager,
  GameFlowState 
} from "./gameManager.js";
import { ConsoleSimulator } from "../../utils/consoleSimulator.js";

const gameOptions = {
  initialLives: 1,
  startInPlayingState: false, // Test from title screen
};

let gameState = createYourGameManager(gameOptions);

// Test title screen to playing transition
console.log("Testing title screen...");
const titleInput: InputState = { action1: true /* other inputs false */ };
gameState = updateGameManager(gameState, titleInput);

// Test playing state
console.log("Testing playing state...");
const playingInput: InputState = { right: true /* other inputs false */ };
gameState = updateGameManager(gameState, playingInput);
```

**C. ConsoleSimulator Integration (Structured Testing)**
Use ConsoleSimulator for automated input sequences:
```typescript
import { ConsoleSimulator } from "../../utils/consoleSimulator.js";

// For functional games - wrap in compatible interface
class GameWrapper {
  constructor(private gameState: any, private updateFn: any) {}
  
  update(input: InputState) {
    this.gameState = this.updateFn(this.gameState, input);
  }
  
  getVirtualScreenData() {
    return this.gameState.virtualScreen;
  }
  
  getScore() { return this.gameState.score; }
  getLives() { return this.gameState.lives; }
  isGameOver() { return this.gameState.gameOverState; }
}

const gameState = createYourGame();
const gameWrapper = new GameWrapper(gameState, updateYourGame);

const predefinedMoves = "rrrr.a.dddd.a.llll".split("");
const simulator = new ConsoleSimulator(gameWrapper, "predefined", {
  totalTicks: 100,
  tickDurationMs: 50,
  predefinedMoves: predefinedMoves,
});

simulator.run();
```

#### 2. Parameter Manipulation for Edge Cases
Temporarily modify game parameters to expose edge cases:

**Functional Module Approach:**
```typescript
// Test with extreme parameters
const testGameState = createYourGame({
  movementInterval: 1,     // Very fast movement
  obstacleCount: 50,       // Many obstacles
  initialLives: 1,         // Single life testing
});
```

**State Manipulation:**
```typescript
// Test with unusual game states
let testState = createYourGame();
testState = { 
  ...testState, 
  playerX: 39,    // Edge position
  playerY: 24,    // Edge position
  score: 999999,  // High score
};
```

**Enemy System Manipulation:**
```typescript
// Disable enemies to isolate mechanics
const testOptions = {
  enemySpawnInterval: 1000000, // Effectively disable spawning
  initialEnemyCount: 0,
};
```

#### 3. State Visualization and Logging
Essential for understanding game behavior:

```typescript
// Screen visualization function for functional games
function printGameScreen(gameState: YourGameState): void {
  const screenData = gameState.virtualScreen;
  let headerFooter = "+" + "-".repeat(40) + "+";
  console.log("\n" + headerFooter);
  
  for (let y = 0; y < 25; y++) {
    let row = "|";
    for (let x = 0; x < 40; x++) {
      row += screenData[y][x]?.char || " ";
    }
    row += "|";
    console.log(row);
  }
  
  console.log(headerFooter);
  console.log(`Score: ${gameState.score}, Lives: ${gameState.lives}, GameOver: ${gameState.gameOverState}`);
  
  // Game-specific state logging
  console.log(`Player: (${gameState.playerX}, ${gameState.playerY})`);
  console.log(`Obstacles: ${gameState.obstacles.length}`);
}

// Input construction for testing
function constructTestInput(frame: number): InputState {
  return {
    up: frame % 60 === 0,
    down: frame % 80 === 0,
    left: frame % 70 === 0,
    right: frame % 90 === 0,
    action1: frame % 120 === 0,
    action2: false,
    space: false,
    enter: false,
    r: false,
  };
}
```

### Testing Different Architectural Patterns

#### Functional Module Testing
```typescript
// Test pure functions independently
const initialState = createYourGame();
const afterMove = updatePlayerPosition(initialState, { x: 5, y: 5 });
const afterCollision = checkCollisions(afterMove);

console.log("State transitions:");
console.log("Initial:", initialState.playerX, initialState.playerY);
console.log("After move:", afterMove.playerX, afterMove.playerY);
console.log("After collision:", afterCollision.lives);
```

#### GameManager Flow Testing
```typescript
// Test flow state transitions
let managerState = createYourGameManager();

// Test title → playing transition
console.log("Flow state:", managerState.gameFlowState); // Should be TITLE (0)
managerState = updateGameManager(managerState, { action1: true });
console.log("Flow state:", managerState.gameFlowState); // Should be PLAYING (1)

// Test playing → game over transition
managerState = { ...managerState, lives: 0 };
managerState = updateGameManager(managerState, {});
console.log("Flow state:", managerState.gameFlowState); // Should be GAME_OVER (2)
```

### Specific Testing Strategies

#### Collision Detection Testing
```typescript
// Test boundary conditions
function testBoundaryCollisions(gameState: YourGameState) {
  const testPositions = [
    { x: -1, y: 10 },   // Left boundary
    { x: 40, y: 10 },   // Right boundary  
    { x: 10, y: -1 },   // Top boundary
    { x: 10, y: 25 },   // Bottom boundary
  ];
  
  testPositions.forEach(pos => {
    const result = isValidPosition(gameState, pos.x, pos.y);
    console.log(`Position (${pos.x}, ${pos.y}): ${result ? "valid" : "invalid"}`);
  });
}
```

#### State Transition Testing
```typescript
// Test game state transitions
function testGameOverTransition(gameState: YourGameState) {
  // Force low lives
  let testState = { ...gameState, lives: 1 };
  
  // Trigger life loss
  testState = loseLife(testState);
  
  console.log(`Lives after loss: ${testState.lives}`);
  console.log(`Game over state: ${testState.gameOverState}`);
  
  // Verify game over triggered correctly
  console.assert(testState.gameOverState === true, "Game over should be triggered");
  console.assert(testState.lives === 0, "Lives should be 0");
}
```

### Implementation Guidelines

#### Debug Logging Strategy
```typescript
// Conditional logging for specific areas
function debugLog(area: string, message: string, condition?: boolean) {
  if (condition !== false) {
    console.log(`[${area}] ${message}`);
  }
}

// Usage in game logic
if (x >= 10 && x <= 20 && y >= 10 && y <= 13) {
  debugLog("DebugArea", `Checking (${x},${y}). State: ${state}`);
}

debugLog("Movement", `Player moved to (${newX}, ${newY})`);
debugLog("Collision", `Collision with obstacle at (${obsX}, ${obsY})`);
```

#### Avoid Masking Real Issues

**DO NOT** use simulation to work around broken game logic:

**❌ Bad Practice:**
```typescript
// Manually positioning to avoid broken spawn logic
let gameState = createYourGame();
gameState = {
  ...gameState,
  enemies: [
    { x: 20, y: 9, type: "GUARD" },  // Manually positioned
    { x: 15, y: 12, type: "PATROL" } // This masks spawn issues
  ]
};
```

**✅ Good Practice:**
```typescript
// Test the actual spawn system
let gameState = createYourGame({
  enemySpawnSettings: {
    minEnemyCount: 3,
    spawnInterval: 120,
    spawnNearFood: true // Test real logic
  }
});

// Let the system spawn naturally, then verify behavior
for (let i = 0; i < 200; i++) {
  gameState = updateYourGame(gameState, {});
  
  if (gameState.enemies.length > 0) {
    console.log("Enemies spawned:", gameState.enemies);
    // Test actual spawn positions relative to food
    gameState.enemies.forEach(enemy => {
      const nearFood = gameState.food.some(food => 
        Math.abs(food.x - enemy.x) < 5 && Math.abs(food.y - enemy.y) < 5
      );
      console.log(`Enemy (${enemy.x}, ${enemy.y}) near food: ${nearFood}`);
    });
    break;
  }
}
```

### NPM Script Integration
Add simulation scripts to [package.json](mdc:package.json):
```json
{
  "scripts": {
    "sim": "npx tsx src/games/gameName/sim.ts",
    "sim:gameManager": "npx tsx src/games/gameName/gameManagerSim.ts",
  }
}
```

### Bug Discovery Checklist

#### Before Implementing New Features
- [ ] Create simulation for the new mechanic (functional or class-based)
- [ ] Test with extreme parameters (very fast, very slow, very large, very small)
- [ ] Test boundary conditions and edge cases
- [ ] Test interaction with existing systems
- [ ] Verify state immutability (for functional modules)

#### When Bug Reports Come In
- [ ] Reproduce in simulation first (isolate from browser environment)
- [ ] Create minimal test case
- [ ] Add logging to suspected code paths
- [ ] Test variations of the scenario  
- [ ] Verify fix doesn't break other scenarios
- [ ] Add regression test

#### Regular Regression Testing
- [ ] Run existing simulations after code changes
- [ ] Test with different parameter combinations
- [ ] Verify visual output matches expectations
- [ ] Check performance with extreme scenarios
- [ ] Test both functional modules and GameManager (if applicable)

### Best Practices

1. **Test Architecture Appropriately**: Use functional testing for pure functions, flow testing for GameManager
2. **Start Simple**: Begin with basic scenarios, then add complexity
3. **Document Scenarios**: Comment what each test is trying to achieve
4. **Version Control Simulations**: Keep successful test cases for regression testing
5. **Share Findings**: Document discovered edge cases for team knowledge
6. **Automate When Possible**: Convert manual tests to automated checks
7. **Test State Immutability**: Ensure functional modules don't mutate input state

Remember: The goal is not just to find bugs, but to understand the system deeply enough to prevent similar issues in the future. Different architectural patterns (functional modules vs classes vs GameManager) require different testing approaches.